/**
 * Generated Code for the Draw2D touch HTML5 lib.
 * File will be generated if you save the *.shape file.
 *
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custom code and event handler here.
 *
 * Looks disconcerting - extending my own class. But this is a good method to
 * merge basic code and override them with custom methods.
 */
crypto_AES = crypto_AES.extend({

    init: function(attr, setter, getter){
         this._super(attr, setter, getter);

         // your special code here
    },

    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @param {Object} context context where objects can store or handover global variables to other objects.
     *  @required
     **/
    calculate:function( context)
    {
    },


    /**
     *  Called if the simulation mode is starting
     *  @required
     **/
    onStart:function( context )
    {
        var input_one = this.getInputPort("Message").getValue();
        var option_key = this.getInputPort("Key").getValue();
        var output_one = this.getOutputPort("encrypt_out");
        var display = this.getOutputPort("display_out");
        
        //console.log(input_one)
        
        if (input_one.substr){
            //sjcl.beware["CBC mode is dangerous because it doesn't protect message integrity."]();
            
            //var prp = new sjcl.cipher.aes();
            //var cipher_text = sjcl.mode.cbc.encrypt(prp, plaintext);
            
            if (option_key === true) {
                var cipher_text = sjcl.encrypt("password",input_one);
            }
            else {
                var key_make = sjcl.codec.hex.fromBits(option_key);
                var cipher_text = sjcl.encrypt(key_make,input_one);
            }
            
            
            output_one.setValue(cipher_text);
            var input_two = this.getInputPort("decrypt_in").getValue();
            
            //var output_cipher= this.getOutputPort("display_out");
            //output_cipher.setValue(jso.substring(index+6, jso.length-4));
            if ((input_two !== true) && (input_two !== false)){
                if (option_key === true) {
                    var decrypted_message = sjcl.decrypt("password", cipher_text);
                }
                else {
                    var decrypted_message = sjcl.decrypt(key_make, cipher_text);
                }
                var output_two = this.getOutputPort("decrypt_out");
                output_two.setValue(decrypted_message);
                var jso = JSON.stringify(cipher_text);
                var index = jso.indexOf("ct");
                display.setValue(jso.substring(index+6, jso.length-4));
            }
        }
    },

    /**
     *  Called if the simulation mode is stopping
     *  @required
     **/
    onStop:function( context )
    {
    },

    /**
     * Get the simulator a hint which kind of hardware the shapes requires or supports
     * This helps the simulator to bring up some dialogs and messages if any new hardware is connected/get lost
     * and your are running a circuit which needs this kind of hardware...
     **/
    getRequiredHardware: function(){
      return {
        raspi: false,
        arduino: false
      }
    }

});