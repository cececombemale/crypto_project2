/**
 * Generated Code for the Draw2D touch HTML5 lib.
 * File will be generated if you save the *.shape file.
 *
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custom code and event handler here.
 *
 * Looks disconcerting - extending my own class. But this is a good method to
 * merge basic code and override them with custom methods.
 */
crypto_EccEncrypt = crypto_EccEncrypt.extend({

    init: function(attr, setter, getter){
         this._super(attr, setter, getter);

         // your special code here
         
    },

    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @param {Object} context context where objects can store or handover global variables to other objects.
     *  @required
     **/
    calculate:function( context)
    {
       
        
    },


    /**
     *  Called if the simulation mode is starting
     *  @required
     **/
    onStart:function( context )
    {
        
         var pair = this.getInputPort("InputKey").getValue();
        var dummy = this.getInputPort("Private_Key").getValue();
        var plaintext = this.getInputPort("Plaintext").getValue();
        if (pair!==true && pair!==false) {
            var c = sjcl.encrypt(pair.pub, plaintext);
            
            var p = sjcl.decrypt(pair.sec, c);
            console.log("cipher ",c);
            console.log("plain ",p);
            var cipher = this.getOutputPort("Ciphertext");
            var cipher2 = this.getOutputPort("Ciphertext2");
            
            
            
            cipher.setValue(p);
            
            
            var decrypt_in = this.getInputPort("Input_Cipher").getValue();
            //console.log("Here" , decrypt_in);
            if (decrypt_in!==true && decrypt_in!==false && decrypt_in!== null) {
                //var plain = sjcl.decrypt(pair.sec, decrypt_in);
                var out = this.getOutputPort("Output_Plain");
                var jso = JSON.stringify(c);
                var index = jso.indexOf("ct");
                out.setValue(p);
                cipher2.setValue(jso.substring(index+6, jso.length-4));
            }
            
                
        }
    },

    /**
     *  Called if the simulation mode is stopping
     *  @required
     **/
    onStop:function( context )
    {
    },

    /**
     * Get the simulator a hint which kind of hardware the shapes requires or supports
     * This helps the simulator to bring up some dialogs and messages if any new hardware is connected/get lost
     * and your are running a circuit which needs this kind of hardware...
     **/
    getRequiredHardware: function(){
      return {
        raspi: false,
        arduino: false
      }
    }

});