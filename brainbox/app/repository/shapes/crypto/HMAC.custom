/**
 * Generated Code for the Draw2D touch HTML5 lib.
 * File will be generated if you save the *.shape file.
 *
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custom code and event handler here.
 *
 * Looks disconcerting - extending my own class. But this is a good method to
 * merge basic code and override them with custom methods.
 */
crypto_HMAC = crypto_HMAC.extend({

    init: function(attr, setter, getter){
         this._super(attr, setter, getter);

         // your special code here
    },

    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @param {Object} context context where objects can store or handover global variables to other objects.
     *  @required
     **/
    calculate:function( context)
    {
       
    },


    /**
     *  Called if the simulation mode is starting
     *  @required
     **/
    onStart:function( context )
    {
        var keyin = this.getInputPort("Key").getValue();
        if(keyin === true || keyin === false || keyin === null) {
            keyin = sjcl.random.randomWords(8)
        }
        var message = this.getInputPort("Message").getValue();
        if(message !== true && message !== false && message !== null) {
            var output = this.getOutputPort("Output");
            var key = sjcl.codec.utf8String.toBits(keyin);
            var out = (new sjcl.misc.hmac(key, sjcl.hash.sha256)).mac(message);
            var hmac = sjcl.codec.hex.fromBits(out)
            output.setValue(hmac);
        }
    },

    /**
     *  Called if the simulation mode is stopping
     *  @required
     **/
    onStop:function( context )
    {
    },

    /**
     * Get the simulator a hint which kind of hardware the shapes requires or supports
     * This helps the simulator to bring up some dialogs and messages if any new hardware is connected/get lost
     * and your are running a circuit which needs this kind of hardware...
     **/
    getRequiredHardware: function(){
      return {
        raspi: false,
        arduino: false
      }
    }

});